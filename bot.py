import asyncio
import re
import aiohttp
import cv2
import numpy as np
from pyzbar.pyzbar import decode

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command, CommandObject
from aiogram.types import (
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    ReplyKeyboardMarkup,
    KeyboardButton,
)
from aiogram.dispatcher.middlewares.base import BaseMiddleware
from aiogram.filters.callback_data import CallbackData
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.utils.keyboard import InlineKeyboardBuilder

# –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π —Ä–∞–±–æ—Ç—ã —Å –ë–î –¥–ª—è Telegram-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–µ–∑–¥–æ–∫
from database import *
import io
from config import *
from enum import Enum

# ---------------------------
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞ –∏ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
# ---------------------------
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()  # –í aiogram v3 Dispatcher –∏ Router –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏

# ---------------------------
# Inline –∏ Reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
# ---------------------------
stop_keyboard = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="‚õî–°–¢–û–ü")]],
    resize_keyboard=True,
    one_time_keyboard=False,
)


# 1. Enum –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π
class Action(str, Enum):
    start = "start"
    stop = "stop"
    omni = "omni"
    chain = "chain"
    account = "account"


# 2. CallbackData –∫–ª–∞—Å—Å —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º
class VeloCallback(CallbackData, prefix="velo"):
    action: Action
    frame: str | None = None
    login: str | None = None


# ---------------------------
# Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
# ---------------------------
class LoggingMiddleware(BaseMiddleware):
    async def __call__(self, handler, event, data):
        message = event

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        user = get_telegram_user(message.from_user.id)
        if not user:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            create_telegram_user(
                telegram_id=message.from_user.id,
                username=message.from_user.username,
                first_name=message.from_user.first_name,
                last_name=message.from_user.last_name,
                approved=False,  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω
            )
            logger.info(
                f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {message.from_user.id} {message.text}"
            )
            await message.answer(
                "üÜï –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö. –û–∂–∏–¥–∞–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
            )
            return
        else:
            if not user.approved:
                logger.info(
                    f"–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message.from_user.id} {message.text}"
                )
                await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
                return
        return await handler(event, data)


# ---------------------------
# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è middleware
# ---------------------------
dp.message.middleware(LoggingMiddleware())


# ---------------------------
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–∑–æ–≤–∞ API-—Å–µ—Ä–≤–µ—Ä–∞
# ---------------------------
async def call_api(method: str, endpoint: str, *, params=None, json=None, data=None):
    url = f"{API_BASE_URL}{endpoint}"
    async with aiohttp.ClientSession() as session:
        async with session.request(
            method, url, params=params, json=json, data=data
        ) as resp:
            if resp.status == 200:
                return await resp.json()
            else:
                detail = await resp.text()
                raise Exception(f"API error {resp.status}: {detail}")


# ---------------------------
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ –≤–µ–ª–æ—Å–∏–ø–µ–¥–∞ (—Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–æ—Ç–æ)
# ---------------------------
async def remove_inline_keyboard(chat_id: int, message_id: int):
    try:
        await asyncio.sleep(300)  # –ñ–¥–µ–º 5 –º–∏–Ω—É—Ç
        await bot.edit_message_reply_markup(
            chat_id=chat_id, message_id=message_id, reply_markup=None
        )
    except Exception as e:
        logger.error(f"Inline keyboard removal error: {e}")


def get_ride_keboard(
    bike_code: str, minutes: int = 30, seconds: int = 0
) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()

    builder.button(
        text="üîì–ó–ê–î–ù–ï–ï –ö–û–õ–ï–°–û",
        callback_data=VeloCallback(action=Action.omni, frame=bike_code),
    )
    builder.button(
        text="üîì–¢–†–û–° –°–ü–ï–†–ï–î–ò",
        callback_data=VeloCallback(action=Action.chain, frame=bike_code),
    )
    builder.button(
        text=f"‚õî{minutes:02d}:{seconds:02d}",
        callback_data=VeloCallback(action=Action.stop, frame=bike_code),
    )
    builder.adjust(1)
    return builder.as_markup()


# ---------------------------
# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ª–æ–≥–∏–Ω–∞ –∏–∑ –±–∞–∑—ã
# ---------------------------
def get_user_login(chat_id: int) -> str:
    user = get_telegram_user(chat_id)
    if not user or not user.selected_login:
        raise Exception("–õ–æ–≥–∏–Ω –Ω–µ –≤—ã–±—Ä–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /setlogin")
    return user.selected_login


# ---------------------------
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–æ–µ–∑–¥–∫–∏ (—Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏)
# ---------------------------
async def auto_finish_ride(chat_id: int, rentId):
    await asyncio.sleep(1 * 60)
    max_retries = 5
    delay = 10
    for attempt in range(1, max_retries + 1):
        try:
            await stop_ride_handler(chat_id, rentId)
            await bot.send_message(
                chat_id,
                text=f"–ü–æ–µ–∑–¥–∫–∞ {rentId} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞",
            )
            return
        except Exception as e:
            logger.error(f"–ê–≤—Ç–æ–∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ (–ø–æ–ø—ã—Ç–∫–∞ {attempt}) –Ω–µ —É–¥–∞–ª–æ—Å—å: {e}")
            if attempt < max_retries:
                await asyncio.sleep(delay)
            else:
                await bot.send_message(
                    chat_id,
                    text=f"–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø–æ–µ–∑–¥–∫—É {rentId}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—Ä—É—á–Ω—É—é /stop",
                )
                return


# ---------------------------
# –§—É–Ω–∫—Ü–∏—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å–æ –≤—Å–µ–º–∏ velobike –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏
# ---------------------------
def get_accounts_keyboard(login: str | None = None) -> InlineKeyboardMarkup:
    accounts = get_all_accounts()  # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    builder = InlineKeyboardBuilder()
    for account in accounts:
        builder.button(
            text=account.login if account.login != login else f"{account.login} ‚úÖ",
            callback_data=VeloCallback(action=Action.account, login=account.login),
        )
    builder.adjust(2)
    return builder.as_markup()


async def countdown_timer(chat_id: int, message_id: int, ride_id: str):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±—Ä–∞—Ç–Ω—ã–º –æ—Ç—Å—á–µ—Ç–æ–º –æ—Ç 30 –º–∏–Ω—É—Ç –¥–æ 0.
    –ö–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –µ—â–µ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–µ–∑–¥–∫–∞.
    –ï—Å–ª–∏ –ø–æ–µ–∑–¥–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ç–∞–π–º–µ—Ä.
    """
    total_seconds = 29 * 60  # 30 –º–∏–Ω—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    update_interval = 30  # –æ–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥

    remaining = total_seconds
    while remaining > 0:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–µ–∑–¥–∫–∞ –µ—â—ë –∞–∫—Ç–∏–≤–Ω–∞
        if not get_ride(chat_id):
            break

        minutes, seconds = divmod(remaining, 60)
        ride_keyboard = get_ride_keboard(ride_id, minutes, seconds)
        try:
            await bot.edit_message_reply_markup(
                chat_id=chat_id,
                message_id=message_id,
                reply_markup=ride_keyboard,
            )
        except Exception as ex:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –æ–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á—ë—Ç: {ex}")
        await asyncio.sleep(update_interval)
        remaining -= update_interval


# ---------------------------
# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ–µ–∑–¥–∫–∏
# ---------------------------
async def stop_ride_handler(chat_id: int, rentId: str | None = None):
    ride = get_ride(chat_id)
    if not ride:
        raise Exception("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–µ–∑–¥–∫–∏")
    if rentId and ride.rent_id != rentId:
        raise Exception("–ù–æ–º–µ—Ä –ø–æ–µ–∑–¥–∫–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç")
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–æ–ª–µ–∑–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã
    finish_payload = {
        "login": ride.login,
        "rentId": ride.rent_id,
        "clientGeoPosition": {"lat": 0, "lon": 0},
    }
    park_payload = {
        "login": ride.login,
        "rentId": ride.rent_id,
        "deviceId": ride.device_id,
        "externalParkingId": "undefined",
    }
    finish_after_payload = {
        "login": ride.login,
        "rentId": ride.rent_id,
        "clientGeoPosition": {"lat": 0, "lon": 0},
    }
    if ride.stop_step == 0:
        # 1. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∞—Ä–µ–Ω–¥—ã
        finish_result = await call_api("POST", "/rent/finish", json=finish_payload)
        if finish_result:
            bump_stop_step(ride.user_id)
        logger.debug(finish_result)
    if ride.stop_step == 1:
        # 2. –ü–∞—Ä–∫–æ–≤–∫–∞ –≤–µ–ª–æ—Å–∏–ø–µ–¥–∞
        park_result = await call_api("POST", "/rent/park", json=park_payload)
        if park_result:
            bump_stop_step(ride.user_id)
        logger.debug(park_result)
    if ride.stop_step == 2:
        # 3. –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–¥–¥–µ–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ)
        fake_image = io.BytesIO(b"fake_image_data")
        form = aiohttp.FormData()
        form.add_field(
            "photo",
            fake_image.read(),
            filename=f"{ride.rent_id}.jpg",
            content_type="image/jpeg",
        )
        # –í –∑–∞–ø—Ä–æ—Å–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ query-–ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        upload_params = {
            "login": ride.login,
            "rentId": ride.rent_id,
            "deviceId": ride.device_id,
        }
        upload_result = await call_api(
            "POST", "/rent/upload_photo", params=upload_params, data=form
        )
        if upload_result:
            bump_stop_step(ride.user_id)
        logger.debug(upload_result)

    if ride.stop_step == 3:
        # 4. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∞—Ä–µ–Ω–¥—ã –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ
        finish_after_result = await call_api(
            "POST", "/rent/finish_after_upload", json=finish_after_payload
        )
        if finish_after_result:
            bump_stop_step(ride.user_id)
        logger.debug(finish_after_result)
    # –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö —à–∞–≥–æ–≤ ‚Äì —É–¥–∞–ª—è–µ–º –ø–æ–µ–∑–¥–∫—É
    delete_ride(chat_id)
    return ride.rent_id


# ---------------------------
# –ö–æ–º–∞–Ω–¥–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ª–æ–≥–∏–Ω–∞ (/setlogin)
# –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤, –≤—ã–≤–æ–¥–∏—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
# ---------------------------
@dp.message(Command("setlogin"))
async def set_login(message: types.Message, command: CommandObject):
    args = command.args
    user = get_telegram_user(message.from_user.id)
    if not args:
        keyboard = get_accounts_keyboard(user.selected_login)
        await message.answer(
            text=f"üÜî –í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–≥–∏–Ω –¥–ª—è –∞—Ä–µ–Ω–¥—ã:",
            reply_markup=keyboard,
        )
        return
    login = args.strip()
    update_telegram_user(message.from_user.id, selected_login=login)
    await message.answer(text=f"‚úÖ –í–∞—à –ª–æ–≥–∏–Ω –¥–ª—è –∞—Ä–µ–Ω–¥—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: <b>{login}</b>")


# ---------------------------
# –ö–æ–º–∞–Ω–¥–∞ /start
# ---------------------------
@dp.message(Command("start"))
async def cmd_start(message: types.Message, command: CommandObject):
    args = command.args
    if args:
        await handle_bike_input(message)
    else:
        await message.answer(
            text="‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω\n–î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ª–æ–≥–∏–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /setlogin",
            reply_markup=stop_keyboard,
        )


@dp.message(F.photo | F.text.regexp(r"\d{5}"))
async def handle_bike_input(message: types.Message):
    chat_id = message.chat.id
    try:
        bike_code = ""
        if message.photo:
            file_info = await bot.get_file(message.photo[-1].file_id)
            file_bytes = await bot.download_file(file_info.file_path)
            arr = np.asarray(bytearray(file_bytes.read()), dtype=np.uint8)
            img = cv2.imdecode(arr, cv2.IMREAD_COLOR)
            decoded_objs = decode(img)
            if decoded_objs:
                m = re.search(r"\d{5}", decoded_objs[0].data.decode())
                if m:
                    bike_code = m.group()
        else:
            m = re.search(r"\d{5}", message.text)
            if m:
                bike_code = m.group()
        if not bike_code:
            await message.answer(text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –Ω–æ–º–µ—Ä –≤–µ–ª–æ—Å–∏–ø–µ–¥–∞")
            return

        login = get_user_login(chat_id)
        params = {"login": login}
        vehicle_info = await call_api("GET", f"/vehicle/{bike_code}", params=params)
        if vehicle_info.get("operativeStatus") != "STATIONED":
            await message.answer(text="‚ùå –í–µ–ª–æ—Å–∏–ø–µ–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∞—Ä–µ–Ω–¥—ã")
            return
        if vehicle_info.get("deviceType") == "OMNI_IOT_DEVICE":
            new = "üÜï"
        else:
            new = ""
        builder = InlineKeyboardBuilder()
        builder.button(
            text="‚úÖ –°–¢–ê–†–¢",
            callback_data=VeloCallback(action=Action.start, frame=bike_code),
        )
        kb = builder.as_markup()
        sent_msg = await message.answer(
            text=f"{new}<b>–í–µ–ª–æ—Å–∏–ø–µ–¥ –≥–æ—Ç–æ–≤ –∫ –∞—Ä–µ–Ω–¥–µ!</b>\n\n<b>üÜî –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>\n‚Ä¢ –ù–æ–º–µ—Ä —Ä–∞–º—ã: <code>{vehicle_info['frameNumber']}</code>\n‚Ä¢ –ó–∞—Ä—è–¥ –±–∞—Ç–∞—Ä–µ–∏: üîã <b>{vehicle_info['batteryPower']}%</b>\n‚Ä¢ –ü—Ä–æ–±–µ–≥ –∑–∞ –ø–æ–µ–∑–¥–∫—É: <b>{vehicle_info['singleRidingMileage']} –∫–º</b>\n\n<b>üìç –¢–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:</b>\n‚Ä¢ –ê–¥—Ä–µ—Å –ø–∞—Ä–∫–æ–≤–∫–∏: <b>{', '.join([i['name'] for i in sorted(vehicle_info['zones'],key=lambda x:x['id'])])}</b>\n\n–ù–∞–∂–º–∏—Ç–µ '–°–¢–ê–†–¢' –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø–æ–µ–∑–¥–∫–∏",
            reply_markup=kb,
        )
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç,
        # –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ –¥–æ —ç—Ç–æ–≥–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è).
        asyncio.create_task(remove_inline_keyboard(chat_id, sent_msg.message_id))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await message.answer(text=f"‚ùå –û—à–∏–±–∫–∞:\n{e}")


# ---------------------------
# Callback –¥–ª—è –≤—ã–±–æ—Ä–∞ –ª–æ–≥–∏–Ω–∞ –∏–∑ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
# ---------------------------
@dp.callback_query(VeloCallback.filter(F.action == Action.account))
async def process_account_selection(
    callback: types.CallbackQuery, callback_data: VeloCallback
):
    selected_login = callback_data.login
    update_telegram_user(callback.message.chat.id, selected_login=selected_login)
    await callback.message.edit_text(
        text=f"‚úÖ –í–∞—à –ª–æ–≥–∏–Ω –¥–ª—è –∞—Ä–µ–Ω–¥—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {selected_login}"
    )


# ---------------------------
# Callback –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ –ø–æ–µ–∑–¥–∫–∏ (–Ω–æ–º–µ—Ä –≤–µ–ª–æ—Å–∏–ø–µ–¥–∞)
# ---------------------------
@dp.callback_query(VeloCallback.filter(F.action == Action.start))
async def callback_start_ride(
    callback: types.CallbackQuery, callback_data: VeloCallback
):
    chat_id = callback.message.chat.id
    bike_code = callback_data.frame
    try:
        await callback.message.edit_text(
            text="‚è≥ –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø–æ–µ–∑–¥–∫–∞", reply_markup=None
        )
        login = get_user_login(chat_id)
        payload = {
            "login": login,
            "bikeSerialNumber": bike_code,
            "clientGeoPosition": {"lat": 0, "lon": 0},
        }
        ride_data = await call_api("POST", "/rent/rents", json=payload)
        # ride_data = {"rentId": "1", "deviceId": "1", "frameNumber": "1"}
        if ride_data.get("failedReason") == "ACCOUNT_BLOCKED":
            raise Exception("–ù–∞ –∞–∫–∫–∞—É–Ω—Ç–µ –∏–º–µ—é—Ç—Å—è –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏, –∏–ª–∏ –Ω–µ –æ–ø–ª–∞—á–µ–Ω —Ç–∞—Ä–∏—Ñ")
        save_ride(
            chat_id,
            login,
            ride_data["rentId"],
            ride_data["deviceId"],
            ride_data.get("frameNumber", bike_code),
        )
        ride_keyboard = get_ride_keboard(bike_code)
        await callback.message.edit_text(
            text=f"üö≤ –ü–æ–µ–∑–¥–∫–∞ {ride_data.get('frameNumber', bike_code)} –Ω–∞—á–∞—Ç–∞\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
            reply_markup=ride_keyboard,
        )
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–µ–∑–¥–∫–∏
        asyncio.create_task(auto_finish_ride(chat_id, ride_data["rentId"]))
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á—ë—Ç–∞ —Ç–∞–π–º–µ—Ä–∞ (30 –º–∏–Ω—É—Ç)
        asyncio.create_task(
            countdown_timer(chat_id, callback.message.message_id, ride_data["rentId"])
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–æ–µ–∑–¥–∫–∏: {e}")
        await callback.message.answer(text=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–æ–µ–∑–¥–∫–∏:\n{e}")


# ---------------------------
# Callback –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∑–∞–º–∫–∞ (omni / chain)
# ---------------------------
@dp.callback_query(VeloCallback.filter(F.action == Action.omni))
@dp.callback_query(VeloCallback.filter(F.action == Action.chain))
async def callback_open_lock(
    callback: types.CallbackQuery, callback_data: VeloCallback
):
    chat_id = callback.message.chat.id
    lock_type = callback_data.action
    try:
        ride = get_ride(chat_id)
        if not ride:
            await callback.answer(text="–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–µ–∑–¥–∫–∏.", show_alert=True)
            return
        payload = {
            "login": ride.login,
            "rentId": ride.rent_id,
            "deviceId": ride.device_id,
            "lockType": lock_type,
        }
        result = await call_api("POST", "/rent/open_lock", json=payload)
        await callback.answer(text="‚úÖ –ó–∞–º–æ–∫ –æ—Ç–∫—Ä—ã—Ç.")
        logger.info(f"–ó–∞–º–æ–∫ –¥–ª—è –ø–æ–µ–∑–¥–∫–∏ {ride.rent_id} –æ—Ç–∫—Ä—ã—Ç: {result}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –∑–∞–º–∫–∞: {e}")
        await callback.message.answer(text=f"‚ùå –û—à–∏–±–∫–∞:\n{e}")


# ---------------------------
# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ–µ–∑–¥–∫–∏ (callback –∏ —Ç–µ–∫—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞)
# ---------------------------
@dp.message(F.text.lower().contains("—Å—Ç–æ–ø"))
@dp.message(Command("stop"))
@dp.callback_query(VeloCallback.filter(F.action == Action.stop))
async def stop_ride_handler_unified(event: types.Message | types.CallbackQuery):
    try:
        if isinstance(event, types.CallbackQuery):
            chat_id = event.message.chat.id
            reply_obj = event.message
            await event.answer()
        else:
            chat_id = event.chat.id
            reply_obj = await event.answer(text="‚åõ–ó–∞–≤–µ—Ä—à–∞—é –ø–æ–µ–∑–¥–∫—É...")
        await stop_ride_handler(chat_id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø–æ–µ–∑–¥–∫–∏: {e}")
        await reply_obj.answer(text=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø–æ–µ–∑–¥–∫–∏:\n{e}")


# ---------------------------
# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
# ---------------------------
async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
